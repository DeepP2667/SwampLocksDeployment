// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SwampLocksDb.Data;

#nullable disable

namespace SwampLocks.Migrations
{
    [DbContext(typeof(FinancialContext))]
    partial class FinancialContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("SwampLocksDb.Models.Article", b =>
                {
                    b.Property<string>("Ticker")
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("ArticleName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("SentimentScore")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Ticker", "ArticleName", "Date");

                    b.ToTable("Articles");
                });

            modelBuilder.Entity("SwampLocksDb.Models.CashFlowStatement", b =>
                {
                    b.Property<string>("Ticker")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnOrder(0);

                    b.Property<DateTime>("FiscalDateEnding")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(1);

                    b.Property<decimal>("CapitalExpenditures")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("CashFlowFromFinancing")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("CashFlowFromInvestment")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ChangeInCashAndCashEquivalents")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ChangeInExchangeRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ChangeInInventory")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ChangeInOperatingAssets")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ChangeInOperatingLiabilities")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ChangeInReceivables")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("DepreciationDepletionAndAmortization")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("DividendPayout")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("DividendPayoutCommonStock")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("DividendPayoutPreferredStock")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("NetIncome")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("OperatingCashFlow")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("PaymentsForOperatingActivities")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("PaymentsForRepurchaseOfCommonStock")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("PaymentsForRepurchaseOfEquity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("PaymentsForRepurchaseOfPreferredStock")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ProceedsFromIssuanceOfCommonStock")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ProceedsFromIssuanceOfLongTermDebtAndCapitalSecuritiesNet")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ProceedsFromIssuanceOfPreferredStock")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ProceedsFromOperatingActivities")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ProceedsFromRepaymentsOfShortTermDebt")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ProceedsFromRepurchaseOfEquity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ProceedsFromSaleOfTreasuryStock")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ProfitLoss")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ReportedCurrency")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Ticker", "FiscalDateEnding");

                    b.ToTable("CashFlowStatements");
                });

            modelBuilder.Entity("SwampLocksDb.Models.ExchangeRate", b =>
                {
                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("TargetCurrency")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("Rate")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Date", "TargetCurrency");

                    b.ToTable("ExchangeRates");
                });

            modelBuilder.Entity("SwampLocksDb.Models.InterestRate", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Rate")
                        .HasColumnType("decimal(10,4)");

                    b.Property<string>("RateType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("InterestRates");
                });

            modelBuilder.Entity("SwampLocksDb.Models.Sector", b =>
                {
                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Name");

                    b.ToTable("Sectors");
                });

            modelBuilder.Entity("SwampLocksDb.Models.SectorPerformance", b =>
                {
                    b.Property<string>("SectorName")
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Performance")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("SectorName", "Date");

                    b.ToTable("SectorPerformances");
                });

            modelBuilder.Entity("SwampLocksDb.Models.Stock", b =>
                {
                    b.Property<string>("Ticker")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("SectorName")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Ticker");

                    b.HasIndex("SectorName");

                    b.ToTable("Stocks");
                });

            modelBuilder.Entity("SwampLocksDb.Models.StockBalanceSheet", b =>
                {
                    b.Property<string>("Ticker")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnOrder(0);

                    b.Property<int>("FiscalYear")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<decimal>("CashAndCashEquivalents")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("CashAndShortTermInvestments")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("CommonStock")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long>("CommonStockSharesOutstanding")
                        .HasColumnType("bigint");

                    b.Property<decimal>("CurrentAccountsPayable")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("CurrentDebt")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("CurrentNetReceivables")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("DeferredRevenue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Goodwill")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("IntangibleAssets")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Inventory")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Investments")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("LongTermDebt")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("LongTermInvestments")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("OtherCurrentAssets")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("OtherCurrentLiabilities")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("PropertyPlantEquipment")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ReportedCurrency")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("RetainedEarnings")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ShortTermDebt")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ShortTermInvestments")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalAssets")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalCurrentAssets")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalCurrentLiabilities")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalLiabilities")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalNonCurrentAssets")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalNonCurrentLiabilities")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalShareholderEquity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TreasuryStock")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Ticker", "FiscalYear");

                    b.ToTable("StockBalanceSheets");
                });

            modelBuilder.Entity("SwampLocksDb.Models.StockData", b =>
                {
                    b.Property<string>("Ticker")
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("ClosingPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("MarketCap")
                        .HasColumnType("decimal(18,2)");

                    b.Property<double>("PublicSentiment")
                        .HasColumnType("float");

                    b.HasKey("Ticker", "Date");

                    b.ToTable("StockDataEntries");
                });

            modelBuilder.Entity("SwampLocksDb.Models.Article", b =>
                {
                    b.HasOne("SwampLocksDb.Models.Stock", "Stock")
                        .WithMany("Articles")
                        .HasForeignKey("Ticker")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Stock");
                });

            modelBuilder.Entity("SwampLocksDb.Models.CashFlowStatement", b =>
                {
                    b.HasOne("SwampLocksDb.Models.Stock", "Stock")
                        .WithMany("CashFlowStatements")
                        .HasForeignKey("Ticker")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Stock");
                });

            modelBuilder.Entity("SwampLocksDb.Models.SectorPerformance", b =>
                {
                    b.HasOne("SwampLocksDb.Models.Sector", "Sector")
                        .WithMany("Performances")
                        .HasForeignKey("SectorName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sector");
                });

            modelBuilder.Entity("SwampLocksDb.Models.Stock", b =>
                {
                    b.HasOne("SwampLocksDb.Models.Sector", "Sector")
                        .WithMany("Stocks")
                        .HasForeignKey("SectorName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sector");
                });

            modelBuilder.Entity("SwampLocksDb.Models.StockBalanceSheet", b =>
                {
                    b.HasOne("SwampLocksDb.Models.Stock", "Stock")
                        .WithMany("BalanceSheets")
                        .HasForeignKey("Ticker")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Stock");
                });

            modelBuilder.Entity("SwampLocksDb.Models.StockData", b =>
                {
                    b.HasOne("SwampLocksDb.Models.Stock", "Stock")
                        .WithMany("DataEntries")
                        .HasForeignKey("Ticker")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Stock");
                });

            modelBuilder.Entity("SwampLocksDb.Models.Sector", b =>
                {
                    b.Navigation("Performances");

                    b.Navigation("Stocks");
                });

            modelBuilder.Entity("SwampLocksDb.Models.Stock", b =>
                {
                    b.Navigation("Articles");

                    b.Navigation("BalanceSheets");

                    b.Navigation("CashFlowStatements");

                    b.Navigation("DataEntries");
                });
#pragma warning restore 612, 618
        }
    }
}
